      1  0000                            processor    6502
      2  0000                ;------------------------------------------------------------
      3  0000                ;SYM-HUB: RS232 Mailbox for 3 Hubsters, 84 bytes apiece
      4  0000                ;  -- connects to an identical box for 3 more Hubsters
      5  0000                ; author Phil Stone, 1987
      6  0000                ;
      7  0000                ; Source recreated from machine code of original SYM HUB ROM
      8  0000                ;  -- assembles back to identical machine code as in ROM
      9  0000                ;------------------------------------------------------------
     10  0000    
     11  c800                * = $C800
     12  c800
     13  c800                ;---------   CONSTANTS
     14  c800                ; OFFSETS into 5-byte read/write info:
     15  c800                WRI_PT    =    $00        ;WRITE_PTR(2 bytes)
     16  c800                REA_PT    =    $02        ;READ_PTR(2 bytes)
     17  c800                DAT_PT    =    $04        ;Data
     18  c800                ACSTAT    =    $00        ;ACIA register offsets
     19  c800                ACDATA    =    $01
     20  c800
     21  c800                ;----------   ZERO PAGE VARIABLES
     22  c800                HTIMER    =    $00        ;$00 - $01 HUB timer: 60Hz 16-bit count since start or reset
     23  c800                HMEM00    =    $06        ;$06 - $09 channel pointers to hub memory pointers & data
     24  c800                MPTR_A    =    $0A        ;5 bytes of read/write ptrs & data for channel A
     25  c800                MPTR_B    =    $0F        ;5 bytes of read/write ptrs & data for channel B
     26  c800                MPTR_C    =    $14        ;5 bytes of read/write ptrs & data for channel C
     27  c800                MPTR_D    =    $19        ;5 bytes of read/write ptrs & data for channel D
     28  c800                INBYTE    =    $1E        ;incoming byte (command nibble | data nibble)
     29  c800                DATANB    =    $20        ;data nibble
     30  c800                CMDVEC    =    $0022      ;2-byte command vector
     31  c800                ADRPTR    =    $24        ;pointer to read and write pointers for each channel
     32  c800                MEMORY    =    $26        ;pointer into actual storage ($300-$4FF)
     33  c800                HUBCHN    =    $28        ;Hub channel 0-3
     34  c800                PRTSNO    =    $29        ;set to 2 to use PORT D as extra Hubster (no copy channel)
     35  c800                D_ACTV    =    $2A        ;Hub-to-Hub copy operation (on 'D' ACIAs) active?
     36  c800                BVECTR    =    $2B        ;two-byte jump vector
     37  c800                HCPY_F    =    $2D        ;HUB copy (from) pointer
     38  c800                HX_PTR    =    $2E        ;pointer to 'external' page of Hub memory, for copying operation
     39  c800                READVC    =    $002F      ;ACIA Read vector (2 bytes)
     40  c800                WRITVC    =    $0031      ;ACIA Write vector (2 bytes)
     41  c800                HTDSP0    =    $34        ;Hub timer display digits
     42  c800                HTDSP1    =    $35
     43  c800                HTDSP2    =    $36
     44  c800                HTDSP3    =    $37
     45  c800                HTDSP4    =    $38
     46  c800                IN_BUF    =    $39        ;input buffer pointer (2 bytes)
     47  c800                OU_BUF    =    $3B        ;output (processed) buffer pointer (2 bytes)
     48  c800                INBLOC    =    $3D        ;block incoming data? (overrun)
     49  c800                DSTATX    =    $3E        ;copy of last ACIA channel D status
     50  c800                XRSTVC    =    $003F      ;2-byte custom reset vector
     51  c800                V1IFLG    =    $41        ;copy of last VIA #1 interrupt flags
     52  c800                TPAUSE    =    $42        ;Boolean: in 'pause' state of HUB memory copy?
     53  c800
     54  c800                ;----------  BUFFER PAGE
     55  c800                BUFPGE    =    $200       ; - $2FF: used for input buffering
     56  c800
     57  c800                ;----------  'HUB' SHARED MEMORY
     58  c800                HL_MEM    =    $300       ;memory space for 3 local Hub members (84 bytes each)
     59  c800                HX_MEM    =    $400       ;memory space for 3 'external' Hub members (84 bytes each)
     60  c800
     61  c800                ;----------  4 X 6850 ACIA (Serial interface) chips
     62  c800                HUB_AS    =    $4010      ;HUB ACIA A - Control/Status register
     63  c800                HUB_A     =    $4011      ;HUB ACIA A - Data register
     64  c800                HUB_BS    =    $4020      ;HUB ACIA B - Control/Status register
     65  c800                HUB_B     =    $4021      ;HUB ACIA B - Data register
     66  c800                HUB_CS    =    $4040      ;HUB ACIA C - Control/Status register
     67  c800                HUB_C     =    $4041      ;HUB ACIA C - Data register
     68  c800                HUB_DS    =    $4080      ;HUB ACIA D - Control/Status register
     69  c800                HUB_D     =    $4081      ;HUB ACIA D - Data register
     70  c800
     71  c800                ;----------  SYM Monitor subroutines
     72  c800                BEEP      =    $8972      ;Beep the SYM annunciator
     73  c800                CONFIG    =    $89A5      ;Configure SYM I/O (kbd and display)
     74  c800                ACCESS    =    $8B86      ;Unlock system memory (kbd and display)
     75  c800                SEGSM1    =    $8C29      ;SYM display
     76  c800
     77  c800                ;---------  VIA (6522) #1
     78  c800                V1T1CL    =    $A004      ;VIA 1 Timer 1 Write Latch / Read Counter Low byte
     79  c800                V1T2CL    =    $A008      ;VIA 1 Timer 2 Write Latch / Read Counter Low byte
     80  c800                V1_ACR    =    $A00B      ;VIA 1 Auxiliary Control Register
     81  c800                V1_IFR    =    $A00D      ;VIA 1 Interrupt Flag Register
     82  c800                V1_IER    =    $A00E      ;VIA 1 Interrupt Enable Register
     83  c800
     84  c800                ;---------  6532 (which includes system RAM)
     85  c800                KBDORA    =    $A400      ;6532 Output register A (Keyboard columns)
     86  c800                KBDORB    =    $A402      ;6532 Output register B (Keyboard rows)
     87  c800                DSPBUF    =    $A640      ;6532 System RAM: Display Buffer
     88  c800
     89  c800                ;---------  VIA (6522) #2
     90  c800                V2T2CL    =    $A808      ;VIA 2 Timer 2 Write Latch / Read Counter Low byte
     91  c800                V2_ACR    =    $A80B      ;VIA 2 Auxiliary Control Register
     92  c800                V2_IFR    =    $A80D      ;VIA 2 Interrupt Flag Register
     93  c800                V2_IER    =    $A80E      ;VIA 2 Interrupt Enable Register
     94  c800
     95  c800                USRBRK    =    $FFF6      ;user break vector
     96  c800                RSTVEC    =    $FFFC      ;reset vector
     97  c800                IRQVEC    =    $FFFE      ;interrupt vector
     98  c800
     99  c800
    100  c800                ;---------- INITIALIZATION
    101  c800
    102  c800    78                   SEI
    103  c801    20 86 8b             JSR ACCESS       ;unlock system RAM (display, keyboard)
    104  c804    ad fc ff             LDA RSTVEC       ;splice ACIA reset routine into reset vector
    105  c807    85 3f                STA XRSTVC
    106  c809    ad fd ff             LDA RSTVEC+1
    107  c80c    85 40                STA XRSTVC+1
    108  c80e    a9 55                LDA #<RSTTRG
    109  c810    8d fc ff             STA RSTVEC
    110  c813    a9 cc                LDA #>RSTTRG
    111  c815    8d fd ff             STA RSTVEC+1
    112  c818    a9 00                LDA #0           ;init page zero vars
    113  c81a    85 00                STA HTIMER
    114  c81c    85 01                STA HTIMER+1
    115  c81e    85 02                STA $02          ;unused locations 2-5
    116  c820    85 03                STA $03
    117  c822    85 04                STA $04
    118  c824    85 05                STA $05
    119  c826    85 2d                STA HCPY_F
    120  c828    85 2e                STA HX_PTR
    121  c82a    85 39                STA IN_BUF
    122  c82c    85 3b                STA OU_BUF
    123  c82e    85 3d                STA INBLOC
    124  c830    85 25                STA ADRPTR+1
    125  c832    85 42                STA TPAUSE
    126  c834    a9 02                LDA #>BUFPGE     ;in/out buffer: $200-$2FF
    127  c836    85 3a                STA IN_BUF+1
    128  c838    85 3c                STA OU_BUF+1
    129  c83a    a9 09                LDA #9
    130  c83c    20 a5 89             JSR CONFIG
    131  c83f    a2 03                LDX #3
    132  c841    bd 2e c9    SETDSP   LDA DSPDAT,X     ;set display to 'Hub 3.1'
    133  c844    9d 40 a6             STA DSPBUF,X
    134  c847    ca                   DEX
    135  c848    10 f7                BPL SETDSP
    136  c84a    a2 01                LDX #1
    137  c84c    bd 29 8c             LDA SEGSM1,X
    138  c84f    09 80                ORA #$80
    139  c851    8d 44 a6             STA DSPBUF+4
    140  c854    a2 03                LDX #3
    141  c856    bd 29 8c             LDA SEGSM1,X
    142  c859    8d 45 a6             STA DSPBUF+5
    143  c85c    a9 aa                LDA #<HUBCPY
    144  c85e    85 2b                STA BVECTR
    145  c860    a9 cb                LDA #>HUBCPY
    146  c862    85 2c                STA BVECTR+1
    147  c864    a9 16                LDA #<IRQSRV
    148  c866    8d fe ff             STA IRQVEC
    149  c869    a9 cb                LDA #>IRQSRV
    150  c86b    8d ff ff             STA IRQVEC+1
    151  c86e    a9 0a                LDA #MPTR_A
    152  c870    85 06                STA HMEM00
    153  c872    a9 0f                LDA #MPTR_B
    154  c874    85 07                STA HMEM00+1
    155  c876    a9 14                LDA #MPTR_C
    156  c878    85 08                STA HMEM00+2
    157  c87a    a9 19                LDA #MPTR_D
    158  c87c    85 09                STA HMEM00+3
    159  c87e    a9 00                LDA #0
    160  c880    85 0b                STA MPTR_A+1     ;set hi bytes of memory pointers to 0
    161  c882    85 0d                STA MPTR_A+3
    162  c884    85 10                STA MPTR_B+1
    163  c886    85 12                STA MPTR_B+3
    164  c888    85 15                STA MPTR_C+1
    165  c88a    85 17                STA MPTR_C+3
    166  c88c    85 1a                STA MPTR_D+1
    167  c88e    85 1c                STA MPTR_D+3
    168  c890    a9 02                LDA #2           ;make ACIA D a 'copy channel' (not a 4th hubster channel)
    169  c892    85 29                STA PRTSNO
    170  c894    a9 00                LDA #0
    171  c896    85 2a                STA D_ACTV
    172  c898    a2 03                LDX #3           ;write to all 4 ACIA status registers
    173  c89a    a0 00                LDY #ACSTAT
    174  c89c    a9 03       WR1      LDA #$03         ;master reset
    175  c89e    20 d5 ca             JSR WRACIA       ;write to ACIA channel (X)
    176  c8a1    a9 95                LDA #$95         ; /16 = 9600 baud, 8 bits + 1 stop bit,
    177  c8a3    20 d5 ca             JSR WRACIA       ;   receive interrupt enabled
    178  c8a6    ca                   DEX
    179  c8a7    10 f3                BPL WR1
    180  c8a9    58                   CLI
    181  c8aa
    182  c8aa                ;---------- BEGIN MAIN LOOP
    183  c8aa
    184  c8aa    a5 2a       MAINLP   LDA D_ACTV       ;ACIA D already active? (external HUB)
    185  c8ac    d0 0d                BNE BRC8BB       ; Yes: skip past ACIA D polling-for-start
    186  c8ae    ad 80 40             LDA HUB_DS       ; No: see if start byte is ready now
    187  c8b1    29 01                AND #$01         ;receive data register full on ACIA D?
    188  c8b3    f0 06                BEQ BRC8BB       ; No: skip ahead
    189  c8b5    ad 81 40             LDA HUB_D        ; Yes: grab the start byte from ACIA D
    190  c8b8    20 5c ca             JSR STHTMR       ;  and start the HUB timer (and copy process)
    191  c8bb    78          BRC8BB   SEI
    192  c8bc    a5 39                LDA IN_BUF       ;any incoming data from ACIA(s) to process?
    193  c8be    c5 3b                CMP OU_BUF
    194  c8c0    f0 45                BEQ MLOOPX       ; No: skip to end of main loop
    195  c8c2    a0 00                LDY #0           ; Yes: read it in to the appropriate place in HUB memory
    196  c8c4    b1 3b                LDA (OU_BUF),Y   ; get data byte
    197  c8c6    85 1e                STA INBYTE
    198  c8c8    e6 3b                INC OU_BUF
    199  c8ca    b1 3b                LDA (OU_BUF),Y   ;get Hub channel
    200  c8cc    aa                   TAX              ; stash it in X
    201  c8cd    86 28                STX HUBCHN       ; and in var
    202  c8cf    e6 3b                INC OU_BUF
    203  c8d1    a5 3d                LDA INBLOC       ;read interrupts disabled (to catch up)?
    204  c8d3    f0 0f                BEQ BRC8E4       ; No: skip to processing command from queue
    205  c8d5    c6 3d                DEC INBLOC
    206  c8d7    d0 0b                BNE BRC8E4
    207  c8d9    a9 95                LDA #$95         ;re-enable read interrupts
    208  c8db    8d 10 40             STA HUB_AS       ; (and set /16 (9600 baud)) on ACIAs A,B and C
    209  c8de    8d 20 40             STA HUB_BS
    210  c8e1    8d 40 40             STA HUB_CS
    211  c8e4    58          BRC8E4   CLI
    212  c8e5    b5 06                LDA HMEM00,X     ;get the base address for this Hub channel's pointers and data
    213  c8e7    85 24                STA ADRPTR
    214  c8e9    a9 0f                LDA #$0F
    215  c8eb    25 1e                AND INBYTE
    216  c8ed    85 20                STA DATANB       ;data nibble from incoming Command/Data byte
    217  c8ef    a9 f0                LDA #$F0
    218  c8f1    25 1e                AND INBYTE
    219  c8f3    85 1e                STA INBYTE       ;shift the 'command nibble' into place
    220  c8f5    4a                   LSR              ; which indexes CMDTAB, below
    221  c8f6    4a                   LSR
    222  c8f7    4a                   LSR
    223  c8f8    aa                   TAX
    224  c8f9    bd 0e c9             LDA CMDTAB,X
    225  c8fc    85 22                STA CMDVEC
    226  c8fe    e8                   INX
    227  c8ff    bd 0e c9             LDA CMDTAB,X
    228  c902    85 23                STA CMDVEC+1
    229  c904    6c 22 00             JMP (CMDVEC)     ;execute command
    230  c907    58          MLOOPX   CLI
    231  c908    20 02 cb             JSR UPDDSP
    232  c90b    4c aa c8    JUMP00   JMP MAINLP
    233  c90e
    234  c90e                ;---------- END MAIN LOOP
    235  c90e
    236  c90e                ; Vector values for jump to commands, below
    237  c90e    b1 c9       CMDTAB   .WORD  CMD_00    ;set write address LO nibble
    238  c910    b9 c9                .WORD  CMD_01    ;set write address MID nibble
    239  c912    c1 c9                .WORD  CMD_02    ;set write address HI nibble
    240  c914    c9 c9                .WORD  CMD_03    ;write lo nibble of byte to write address
    241  c916    d1 c9                .WORD  CMD_04    ;write hi nibble of byte to write address
    242  c918    dc c9                .WORD  CMD_05    ;add offset to write address
    243  c91a    f3 c9                .WORD  CMD_06    ;write hi nibble of byte and increment write address
    244  c91c    03 ca                .WORD  CMD_07    ;NOP
    245  c91e    07 ca                .WORD  CMD_08    ;set read address LO nibble
    246  c920    0f ca                .WORD  CMD_09    ;set read address MID nibble
    247  c922    17 ca                .WORD  CMD_0A    ;set read address HI nibble
    248  c924    1f ca                .WORD  CMD_0B    ;read byte
    249  c926    2a ca                .WORD  CMD_0C    ;read and increment read address
    250  c928    3a ca                .WORD  CMD_0D    ;read HUB timer lo byte
    251  c92a    42 ca                .WORD  CMD_0E    ;read HUB timer hi byte
    252  c92c    4a ca                .WORD  CMD_0F    ;start HUB timer
    253  c92e
    254  c92e    74          DSPDAT   .BYTE  $74       ;codes for "hub 3.1" message on start-up display
    255  c92f    1c                   .BYTE  $1C
    256  c930    7c                   .BYTE  $7C
    257  c931    00                   .BYTE  $00
    258  c932    86                   .BYTE  $86
    259  c933    bb                   .BYTE  $BB
    260  c934
    261  c934    98          L_HNIB   TYA              ;set HI or LO nibble of read or write address
    262  c935    29 01                AND #$01
    263  c937    d0 09                BNE SETHIX
    264  c939    b1 24                LDA (ADRPTR),Y   ;set LO nibble
    265  c93b    29 f0                AND #$F0
    266  c93d    05 20                ORA DATANB
    267  c93f    91 24                STA (ADRPTR),Y
    268  c941    60                   RTS
    269  c942
    270  c942    18          SETHIX   CLC              ;set HI nibble
    271  c943    b1 24                LDA (ADRPTR),Y
    272  c945    29 f0                AND #$F0
    273  c947    05 20                ORA DATANB
    274  c949    69 03                ADC #>HL_MEM     ;Hub memory is at $300
    275  c94b    91 24                STA (ADRPTR),Y
    276  c94d    60                   RTS
    277  c94e
    278  c94e    b1 24       MIDNIB   LDA (ADRPTR),Y   ;set MID nibble of read or write address
    279  c950    29 0f                AND #$0F
    280  c952    06 20                ASL DATANB
    281  c954    06 20                ASL DATANB
    282  c956    06 20                ASL DATANB
    283  c958    06 20                ASL DATANB
    284  c95a    05 20                ORA DATANB
    285  c95c    91 24                STA (ADRPTR),Y
    286  c95e    60                   RTS
    287  c95f
    288  c95f    b1 24       PREPRW   LDA (ADRPTR),Y   ;set up memory pointer
    289  c961    85 26                STA MEMORY
    290  c963    c8                   INY
    291  c964    b1 24                LDA (ADRPTR),Y
    292  c966    85 27                STA MEMORY+1
    293  c968    60                   RTS
    294  c969
    295  c969    a0 00       WRITEX   LDY #WRI_PT      ;write current data byte to current MEMORY address
    296  c96b    20 5f c9             JSR PREPRW
    297  c96e    a0 04                LDY #DAT_PT
    298  c970    b1 24                LDA (ADRPTR),Y
    299  c972    a0 00                LDY #WRI_PT
    300  c974    91 26                STA (MEMORY),Y
    301  c976    60                   RTS
    302  c977
    303  c977    18          INCADR   CLC              ;increment a 16-bit address pointer
    304  c978    b1 24                LDA (ADRPTR),Y
    305  c97a    69 01                ADC #1
    306  c97c    91 24                STA (ADRPTR),Y
    307  c97e    90 08                BCC BRC988
    308  c980    18                   CLC
    309  c981    c8                   INY
    310  c982    b1 24                LDA (ADRPTR),Y
    311  c984    69 01                ADC #1
    312  c986    91 24                STA (ADRPTR),Y
    313  c988    60          BRC988   RTS
    314  c989
    315  c989    a6 28       READXX   LDX HUBCHN       ;read data byte from current MEMORY address
    316  c98b    a0 00                LDY #ACSTAT      ; and write it to requesting HUB channel
    317  c98d    20 aa ca    BRC98D   JSR RDACIA       ;wait for that ACIA to be ready to transmit
    318  c990    29 02                AND #$02
    319  c992    f0 f9                BEQ BRC98D
    320  c994    a0 00                LDY #0
    321  c996    b1 26                LDA (MEMORY),Y
    322  c998    a0 01                LDY #ACDATA
    323  c99a    20 d5 ca             JSR WRACIA       ;write data byte to ACIA (X) data register
    324  c99d    60                   RTS
    325  c99e
    326  c99e    a6 28       BYTOUT   LDX HUBCHN
    327  c9a0    a0 00                LDY #ACSTAT
    328  c9a2    48                   PHA
    329  c9a3    20 aa ca    BRC9A3   JSR RDACIA       ;read ACIA status register
    330  c9a6    29 02                AND #$02
    331  c9a8    f0 f9                BEQ BRC9A3
    332  c9aa    68                   PLA
    333  c9ab    a0 01                LDY #ACDATA
    334  c9ad    20 d5 ca             JSR WRACIA       ;write to ACIA data register
    335  c9b0    60                   RTS
    336  c9b1
    337  c9b1                ; Commands received from Hubster ACIAs
    338  c9b1    a0 00       CMD_00   LDY #WRI_PT      ;set write address LO nibble
    339  c9b3    20 34 c9             JSR L_HNIB
    340  c9b6    4c 0b c9             JMP JUMP00
    341  c9b9
    342  c9b9    a0 00       CMD_01   LDY #WRI_PT      ;set write address MID nibble
    343  c9bb    20 4e c9             JSR MIDNIB
    344  c9be    4c 0b c9             JMP JUMP00
    345  c9c1
    346  c9c1    a0 01       CMD_02   LDY #WRI_PT+1    ;set write address HI nibble
    347  c9c3    20 34 c9             JSR L_HNIB
    348  c9c6    4c 0b c9             JMP JUMP00
    349  c9c9
    350  c9c9    a0 04       CMD_03   LDY #DAT_PT      ;write lo nibble of byte
    351  c9cb    20 34 c9             JSR L_HNIB
    352  c9ce    4c 0b c9             JMP JUMP00
    353  c9d1
    354  c9d1    a0 04       CMD_04   LDY #DAT_PT      ;write hi nibble of byte to write address
    355  c9d3    20 4e c9             JSR MIDNIB
    356  c9d6    20 69 c9             JSR WRITEX
    357  c9d9    4c 0b c9             JMP JUMP00
    358  c9dc
    359  c9dc    18          CMD_05   CLC              ;add data value to the write address
    360  c9dd    a0 00                LDY #WRI_PT
    361  c9df    b1 24                LDA (ADRPTR),Y
    362  c9e1    65 20                ADC DATANB
    363  c9e3    91 24                STA (ADRPTR),Y
    364  c9e5    90 09                BCC BRC9F0
    365  c9e7    18                   CLC
    366  c9e8    a0 01                LDY #WRI_PT+1
    367  c9ea    b1 24                LDA (ADRPTR),Y
    368  c9ec    69 01                ADC #1
    369  c9ee    91 24                STA (ADRPTR),Y
    370  c9f0    4c 0b c9    BRC9F0   JMP JUMP00
    371  c9f3
    372  c9f3    a0 04       CMD_06   LDY #DAT_PT      ;write hi nibble of byte and incrememnt write address
    373  c9f5    20 4e c9             JSR MIDNIB
    374  c9f8    20 69 c9             JSR WRITEX
    375  c9fb    a0 00                LDY #WRI_PT
    376  c9fd    20 77 c9             JSR INCADR
    377  ca00    4c 0b c9             JMP JUMP00
    378  ca03
    379  ca03    ea          CMD_07   NOP              ;placeholder
    380  ca04    4c 0b c9             JMP JUMP00
    381  ca07
    382  ca07    a0 02       CMD_08   LDY #REA_PT      ;set read address LO nibble
    383  ca09    20 34 c9             JSR L_HNIB
    384  ca0c    4c 0b c9             JMP JUMP00
    385  ca0f
    386  ca0f    a0 02       CMD_09   LDY #REA_PT      ;set read address MID nibble
    387  ca11    20 4e c9             JSR MIDNIB
    388  ca14    4c 0b c9             JMP JUMP00
    389  ca17
    390  ca17    a0 03       CMD_0A   LDY #REA_PT+1    ;set read address HI nibble
    391  ca19    20 34 c9             JSR L_HNIB
    392  ca1c    4c 0b c9             JMP JUMP00
    393  ca1f
    394  ca1f    a0 02       CMD_0B   LDY #REA_PT      ;read byte from MEMORY and write to requesting Hub channel
    395  ca21    20 5f c9             JSR PREPRW
    396  ca24    20 89 c9             JSR READXX
    397  ca27    4c 0b c9             JMP JUMP00
    398  ca2a
    399  ca2a    a0 02       CMD_0C   LDY #REA_PT      ;read byte and increment read address
    400  ca2c    20 5f c9             JSR PREPRW
    401  ca2f    20 89 c9             JSR READXX
    402  ca32    a0 02                LDY #REA_PT
    403  ca34    20 77 c9             JSR INCADR
    404  ca37    4c 0b c9             JMP JUMP00
    405  ca3a
    406  ca3a    a5 00       CMD_0D   LDA HTIMER       ;read Hub timer lo
    407  ca3c    20 9e c9             JSR BYTOUT
    408  ca3f    4c 0b c9             JMP JUMP00
    409  ca42    a5 01       CMD_0E   LDA HTIMER+1     ;read Hub timer hi
    410  ca44    20 9e c9             JSR BYTOUT
    411  ca47    4c 0b c9             JMP JUMP00
    412  ca4a
    413  ca4a    a5 20       CMD_0F   LDA DATANB       ;start Hub timer (and Hub-Hub copy process)
    414  ca4c    c9 01                CMP #1
    415  ca4e    d0 06                BNE BRCA56
    416  ca50    20 8f ca             JSR CLRDSP
    417  ca53    4c 0b c9             JMP JUMP00
    418  ca56    20 5c ca    BRCA56   JSR STHTMR
    419  ca59    4c 0b c9             JMP JUMP00
    420  ca5c
    421  ca5c                ; Start HUB timer and enable interrupts from channel D (external copy)
    422  ca5c    78          STHTMR   SEI
    423  ca5d    a9 c0                LDA #$C0
    424  ca5f    8d 0b a0             STA V1_ACR       ;V1 Timer 1 is free-running
    425  ca62    a9 00                LDA #0
    426  ca64    8d 0b a8             STA V2_ACR       ;V2 Timer 1 is one-shot
    427  ca67    a9 7f                LDA #$7F
    428  ca69    8d 0e a0             STA V1_IER
    429  ca6c    8d 0e a8             STA V2_IER
    430  ca6f    a9 e0                LDA #$E0
    431  ca71    8d 0e a0             STA V1_IER
    432  ca74    a9 a0                LDA #$A0
    433  ca76    8d 0e a8             STA V2_IER
    434  ca79    a9 1a                LDA #$1A         ;set V1 Timer 1 to $411A (16.667 mSecs, or 60 Hz)
    435  ca7b    8d 04 a0             STA V1T1CL
    436  ca7e    a9 41                LDA #$41
    437  ca80    8d 05 a0             STA V1T1CL+1
    438  ca83    a9 b6                LDA #$B6         ;config. ACIA D: /64 (2400 baud) - 8 bits + 1 stop bit,
    439  ca85    8d 80 40             STA HUB_DS       ;  enable receive AND transmit interrupts
    440  ca88    a9 ff                LDA #$FF
    441  ca8a    85 2a                STA D_ACTV
    442  ca8c    8d 81 40             STA HUB_D        ;send "initiator" byte to other HUB to start copy process
    443  ca8f    78          CLRDSP   SEI              ;reset HUB timer and its display digits
    444  ca90    a9 00                LDA #0
    445  ca92    85 00                STA HTIMER
    446  ca94    85 01                STA HTIMER+1
    447  ca96    85 38                STA HTDSP4
    448  ca98    85 37                STA HTDSP3
    449  ca9a    85 36                STA HTDSP2
    450  ca9c    85 35                STA HTDSP1
    451  ca9e    85 34                STA HTDSP0
    452  caa0    a2 05                LDX #5
    453  caa2    9d 40 a6    BRCAA2   STA DSPBUF,X
    454  caa5    ca                   DEX
    455  caa6    10 fa                BPL BRCAA2
    456  caa8    58                   CLI
    457  caa9    60                   RTS
    458  caaa
    459  caaa                ; Read byte from HUB channel (X) ACIA, register (Y)
    460  caaa    8a          RDACIA   TXA
    461  caab    48                   PHA
    462  caac    0a                   ASL
    463  caad    aa                   TAX
    464  caae    bd bd ca             LDA HBRADR,X
    465  cab1    85 2f                STA READVC
    466  cab3    bd be ca             LDA HBRADR+1,X
    467  cab6    85 30                STA READVC+1
    468  cab8    68                   PLA
    469  cab9    aa                   TAX
    470  caba    6c 2f 00             JMP (READVC)
    471  cabd    c5 ca       HBRADR   .WORD  HUBR0
    472  cabf    c9 ca                .WORD  HUBR1
    473  cac1    cd ca                .WORD  HUBR2
    474  cac3    d1 ca                .WORD  HUBR3
    475  cac5    b9 10 40    HUBR0    LDA HUB_AS,Y
    476  cac8    60                   RTS
    477  cac9    b9 20 40    HUBR1    LDA HUB_BS,Y
    478  cacc    60                   RTS
    479  cacd    b9 40 40    HUBR2    LDA HUB_CS,Y
    480  cad0    60                   RTS
    481  cad1    b9 80 40    HUBR3    LDA HUB_DS,Y
    482  cad4    60                   RTS
    483  cad5
    484  cad5                ; Write byte to HUB channel (X) ACIA, register (Y)
    485  cad5    48          WRACIA   PHA
    486  cad6    8a                   TXA
    487  cad7    48                   PHA
    488  cad8    0a                   ASL
    489  cad9    aa                   TAX
    490  cada    bd ea ca             LDA HBWADR,X
    491  cadd    85 31                STA WRITVC
    492  cadf    bd eb ca             LDA HBWADR+1,X
    493  cae2    85 32                STA WRITVC+1
    494  cae4    68                   PLA
    495  cae5    aa                   TAX
    496  cae6    68                   PLA
    497  cae7    6c 31 00             JMP (WRITVC)
    498  caea    f2 ca       HBWADR   .WORD  HUBW0
    499  caec    f6 ca                .WORD  HUBW1
    500  caee    fa ca                .WORD  HUBW2
    501  caf0    fe ca                .WORD  HUBW3
    502  caf2    99 10 40    HUBW0    STA HUB_AS,Y
    503  caf5    60                   RTS
    504  caf6    99 20 40    HUBW1    STA HUB_BS,Y
    505  caf9    60                   RTS
    506  cafa    99 40 40    HUBW2    STA HUB_CS,Y
    507  cafd    60                   RTS
    508  cafe    99 80 40    HUBW3    STA HUB_DS,Y
    509  cb01    60                   RTS
    510  cb02    a2 05       UPDDSP   LDX #5
    511  cb04    a0 00                LDY #0
    512  cb06    bd 40 a6    SCNLUP   LDA DSPBUF,X
    513  cb09    8c 00 a4             STY KBDORA
    514  cb0c    8e 02 a4             STX KBDORB
    515  cb0f    8d 00 a4             STA KBDORA
    516  cb12    ca                   DEX
    517  cb13    10 f1                BPL SCNLUP
    518  cb15    60                   RTS
    519  cb16
    520  cb16                ; Interrupt service routine
    521  cb16    48          IRQSRV   PHA
    522  cb17    8a                   TXA
    523  cb18    48                   PHA
    524  cb19    98                   TYA
    525  cb1a    48                   PHA
    526  cb1b    ba                   TSX
    527  cb1c    bd 04 01             LDA $0104,X
    528  cb1f    29 10                AND #$10
    529  cb21    f0 08                BEQ NOBRK
    530  cb23    68                   PLA
    531  cb24    a8                   TAY
    532  cb25    68                   PLA
    533  cb26    aa                   TAX
    534  cb27    68                   PLA
    535  cb28    6c f6 ff             JMP (USRBRK)
    536  cb2b
    537  cb2b    a0 00       NOBRK    LDY #0
    538  cb2d    a6 29                LDX PRTSNO
    539  cb2f    e0 03                CPX #3
    540  cb31    90 0c                BCC CHK_C
    541  cb33    ad 80 40             LDA HUB_DS       ;any data ready from ACIA D?
    542  cb36    10 06                BPL CHECK_C
    543  cb38    ad 81 40             LDA HUB_D        ; Yes: grab it
    544  cb3b    20 82 cb             JSR STOREB
    545  cb3e    ca          CHECK_C  DEX
    546  cb3f    ad 40 40    CHK_C    LDA HUB_CS       ;any data ready from ACIA C?
    547  cb42    10 06                BPL CHECKB
    548  cb44    ad 41 40             LDA HUB_C        ; Yes: grab it
    549  cb47    20 82 cb             JSR STOREB
    550  cb4a    ca          CHECKB   DEX
    551  cb4b    ad 20 40             LDA HUB_BS       ;any data ready from ACIA B?
    552  cb4e    10 06                BPL CHECKA
    553  cb50    ad 21 40             LDA HUB_B        ; Yes: grab it
    554  cb53    20 82 cb             JSR STOREB
    555  cb56    ca          CHECKA   DEX
    556  cb57    ad 10 40             LDA HUB_AS       ;any data ready from ACIA A?
    557  cb5a    10 06                BPL CHECKT
    558  cb5c    ad 11 40             LDA HUB_A        ; Yes: grab it
    559  cb5f    20 82 cb             JSR STOREB
    560  cb62    ad 0d a0    CHECKT   LDA V1_IFR       ;is this a V1 timer interrupt?
    561  cb65    85 41                STA V1IFLG
    562  cb67    8d 0d a0             STA V1_IFR       ;clear all bits in V1 IFR
    563  cb6a    10 3b                BPL GOJUMP
    564  cb6c    29 40                AND #$40         ;timeout of timer 1?
    565  cb6e    f0 37                BEQ GOJUMP
    566  cb70    e6 00                INC HTIMER       ; Yes: increment Hub timer count
    567  cb72    d0 02                BNE BRCB76
    568  cb74    e6 01                INC HTIMER+1
    569  cb76    20 14 cc    BRCB76   JSR DSP_HT       ;update Hub timer and display/scan it
    570  cb79    4c a7 cb             JMP GOJUMP
    571  cb7c
    572  cb7c    68          IRQOUT   PLA
    573  cb7d    a8                   TAY
    574  cb7e    68                   PLA
    575  cb7f    aa                   TAX
    576  cb80    68                   PLA
    577  cb81    40                   RTI
    578  cb82
    579  cb82                ; Store incoming byte (and channel it came from)
    580  cb82                ;  and check for data overrun
    581  cb82    91 39       STOREB   STA (IN_BUF),Y   ;store byte
    582  cb84    e6 39                INC IN_BUF
    583  cb86    8a                   TXA
    584  cb87    91 39                STA (IN_BUF),Y   ; and the channel it came from
    585  cb89    e6 39                INC IN_BUF
    586  cb8b    a5 39                LDA IN_BUF
    587  cb8d    18                   CLC
    588  cb8e    69 10                ADC #$10         ;check to see if we're not keeping up with incoming
    589  cb90    c5 3b                CMP OU_BUF
    590  cb92    d0 12                BNE BRCBA6       ; everything's ok -- keep going
    591  cb94    a9 55                LDA #$55         ;we're falling behind against incoming data:
    592  cb96    8d 10 40             STA HUB_AS       ; temporarily disable ACIA A,B and C read interrupts
    593  cb99    8d 20 40             STA HUB_BS
    594  cb9c    8d 40 40             STA HUB_CS
    595  cb9f    a9 02                LDA #2           ; keep them disabled for 2 main loops
    596  cba1    85 3d                STA INBLOC
    597  cba3    20 72 89             JSR BEEP         ; make a beep to signal overrun
    598  cba6    60          BRCBA6   RTS
    599  cba7
    600  cba7    6c 2b 00    GOJUMP   JMP (BVECTR)     ;this jumps to 'HUBCPY' just below
    601  cbaa
    602  cbaa                ; Hub-Hub copy process
    603  cbaa                ;  Read in copy of external HUB data page,
    604  cbaa                ;  and write out copy of local page to external HUB
    605  cbaa    a5 41       HUBCPY   LDA V1IFLG       ;check flags from last VIA #1 interrupt
    606  cbac    10 0d                BPL BRCBBB       ; no interrupt -- skip ahead
    607  cbae    29 20                AND #$20         ;V1 timer 2 interrupt?
    608  cbb0    f0 09                BEQ BRCBBB       ; No: skip ahead
    609  cbb2    a9 00                LDA #0           ; Yes: end PAUSE of memory copy
    610  cbb4    85 42                STA TPAUSE
    611  cbb6    a9 b6                LDA #$B6         ;config. ACIA D: x/64 (2400 baud) - 8 bits + 1 stop bit,
    612  cbb8    8d 80 40             STA HUB_DS       ;  enable receive AND transmit interrupts
    613  cbbb    ad 0d a8    BRCBBB   LDA V2_IFR       ;interrupt on V2? (HubCopy Timeout)
    614  cbbe    10 07                BPL BRCBC7
    615  cbc0    8d 0d a8             STA V2_IFR
    616  cbc3    a9 00                LDA #0           ; Yes: reset HUB-copy write pointer to beginning of page
    617  cbc5    85 2e                STA HX_PTR
    618  cbc7    ad 80 40    BRCBC7   LDA HUB_DS       ;check if there's an incoming byte from remote HUB data
    619  cbca    85 3e                STA DSTATX       ;  (a.k.a channel D)
    620  cbcc    10 18                BPL HCPYOU       ; none ready
    621  cbce    29 01                AND #$01
    622  cbd0    f0 14                BEQ HCPYOU
    623  cbd2    ad 81 40             LDA HUB_D        ;one *is* ready - read it in
    624  cbd5    a4 2e                LDY HX_PTR
    625  cbd7    99 00 04             STA HX_MEM,Y     ;store it...
    626  cbda    e6 2e                INC HX_PTR       ; and increment the pointer
    627  cbdc    a9 d2                LDA #$D2         ;reset V2 Timer 2 (HubCopy Timeout) to $30D2 (12.498 mSec)
    628  cbde    8d 08 a8             STA V2T2CL
    629  cbe1    a9 30                LDA #$30
    630  cbe3    8d 09 a8             STA V2T2CL+1
    631  cbe6    a5 3e       HCPYOU   LDA DSTATX       ;get last ACIA D status
    632  cbe8    10 92                BPL IRQOUT       ; if no interrupt request, skip out
    633  cbea    29 02                AND #$02         ; if not 'Transmit Data Register Empty'
    634  cbec    f0 8e                BEQ IRQOUT       ;     -- skip out
    635  cbee    24 42                BIT TPAUSE       ; if in 'pause' state of mem. copy
    636  cbf0    30 8a                BMI IRQOUT       ;     -- skip out
    637  cbf2    a4 2d                LDY HCPY_F       ; get current copy-from pointer
    638  cbf4    e6 2d                INC HCPY_F       ; increment copy-from pointer
    639  cbf6    d0 13                BN  WRBY00       ; if no page wrap, skip to writing byte out
    640  cbf8    a9 5e                LDA #$5E         ;At page wrap: go into 21 mSec pause, for synchronization
    641  cbfa    8d 08 a0             STA V1T2CL       ; set VIA #1 Timer 2 to $515E (20.830 mSec)
    642  cbfd    a9 51                LDA #$51
    643  cbff    8d 09 a0             STA V1T2CL+1
    644  cc02    a9 ff                LDA #$FF
    645  cc04    85 42                STA TPAUSE
    646  cc06    a9 96                LDA #$96         ;enable RECEIVE but NOT TRANSMIT interrupts on ACIA D
    647  cc08    8d 80 40             STA HUB_DS
    648  cc0b    b9 00 03    WRBY00   LDA HL_MEM,Y
    649  cc0e    8d 81 40             STA HUB_D        ;write current 'copy' byte to ACIA D (remote HUB)
    650  cc11    4c 7c cb             JMP IRQOUT
    651  cc14
    652  cc14                ; Display Hub timer in stop-watch format
    653  cc14    e6 38       DSP_HT   INC HTDSP4
    654  cc16    a5 38                LDA HTDSP4
    655  cc18    c9 3c                CMP #60
    656  cc1a    90 2a                BCC BRCC46
    657  cc1c    a9 00                LDA #0
    658  cc1e    85 38                STA HTDSP4       ; seconds
    659  cc20    e6 37                INC HTDSP3
    660  cc22    a5 37                LDA HTDSP3
    661  cc24    c9 0a                CMP #10
    662  cc26    90 1e                BCC BRCC46
    663  cc28    a9 00                LDA #0
    664  cc2a    85 37                STA HTDSP3       ; tens of seconds
    665  cc2c    e6 36                INC HTDSP2
    666  cc2e    a5 36                LDA HTDSP2
    667  cc30    c9 06                CMP #6
    668  cc32    90 12                BCC BRCC46
    669  cc34    a9 00                LDA #0
    670  cc36    85 36                STA HTDSP2       ; minutes
    671  cc38    e6 35                INC HTDSP1
    672  cc3a    a5 35                LDA HTDSP1
    673  cc3c    c9 0a                CMP #10
    674  cc3e    90 06                BCC BRCC46
    675  cc40    a9 00                LDA #0
    676  cc42    85 35                STA HTDSP1       ; tens of minutes
    677  cc44    e6 34                INC HTDSP0
    678  cc46    a2 03       BRCC46   LDX #3
    679  cc48    b5 34       BRCC48   LDA HTDSP0,X
    680  cc4a    a8                   TAY
    681  cc4b    b9 29 8c             LDA SEGSM1,Y
    682  cc4e    9d 42 a6             STA DSPBUF+2,X
    683  cc51    ca                   DEX
    684  cc52    10 f4                BPL BRCC48
    685  cc54    60                   RTS
    686  cc55
    687  cc55                ; Reset ALL ACIAs - spliced into system reset
    688  cc55    a9 03       RSTTRG   LDA #3
    689  cc57    8d 10 40             STA HUB_AS
    690  cc5a    8d 20 40             STA HUB_BS
    691  cc5d    8d 40 40             STA HUB_CS
    692  cc60    8d 80 40             STA HUB_DS
    693  cc63    6c 3f 00             JMP (XRSTVC)
    694  cc66
    695  cc66                        .END
